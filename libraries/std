#code#
// Boolean constants
@var true = @native(true : @Boolean);
@var false = @native(false : @Boolean);
@var null = @native(null : @Null);

// comparison
@var @operator>(lhs : @Integer, rhs : @Integer) = @native(greater : @Boolean);
@var @operator>(lhs : @Float, rhs : @Float) = @native(greater : @Boolean);
@var @operator>(lhs : @Character, rhs : @Character) = @native(greater : @Boolean);
@var @operator>=(lhs : @Integer, rhs : @Integer) = @native(greater_equal : @Boolean);
@var @operator>=(lhs : @Float, rhs : @Float) = @native(greater_equal : @Boolean);
@var @operator>=(lhs : @Character, rhs : @Character) = @native(greater_equal : @Boolean);
@var @operator<(lhs : @Integer, rhs : @Integer) = @native(less : @Boolean);
@var @operator<(lhs : @Float, rhs : @Float) = @native(less : @Boolean);
@var @operator<(lhs : @Character, rhs : @Character) = @native(less : @Boolean);
@var @operator<=(lhs : @Integer, rhs : @Integer) = @native(less_equal : @Boolean);
@var @operator<=(lhs : @Float, rhs : @Float) = @native(less_equal : @Boolean);
@var @operator<=(lhs : @Character, rhs : @Character) = @native(less_equal : @Boolean);
@var @operator==(lhs : @Integer, rhs : @Integer) = @native(equal : @Boolean);
@var @operator==(lhs : @Float, rhs : @Float) = @native(equal : @Boolean);
@var @operator==(lhs : @Boolean, rhs : @Boolean) = @native(equal : @Boolean);
@var @operator==(lhs : @Character, rhs : @Character) = @native(equal : @Boolean);
@var @operator==(lhs : @Null, rhs : @Null) = true;
@var @operator!=(lhs : @Integer, rhs : @Integer) = @native(not_equal : @Boolean);
@var @operator!=(lhs : @Float, rhs : @Float) = @native(not_equal : @Boolean);
@var @operator!=(lhs : @Boolean, rhs : @Boolean) = @native(not_equal : @Boolean);
@var @operator!=(lhs : @Character, rhs : @Character) = @native(not_equal : @Boolean);
@var @operator!=(lhs : @Null, rhs : @Null) = false;

// Type conversions
@var boolean(x : @Boolean) = x;
@var boolean(x : @Integer) = x != 0;
@var boolean(x : @Float) = @native(test_float : @Boolean);
@var boolean(x : @Character) = x != '\0';
@var boolean(x : @Null) = false;

@var integer(x : @Boolean) = @if(x, 1, 0);
@var integer(x : @Integer) = x;
@var integer(x : @Float) = @native(trunc : @Integer);
@var integer(x : @Character) = @native(ord : @Integer);
@var integer(x : [@Character]) = @native(parseInt : @Integer);
@var integer(x : @Null) = 0;

@var float(x : @Integer) = @native(noop : @Float);
@var float(x : @Float) = x;
@var float(x : [@Character]) = @native(parseFloat : @Float);
@var float(x : @Null) = 0.0;

@var character(x : @Integer) = @native(chr : @Character);
@var character(x : @Character) = x;
@var character(x : @Null) = '\0';

@var string(x : @Boolean) = @if(x, "true", "false");
@var string(x : @Character) = [x];
@var string(x : @Integer) = @native(String : [@Character]);
@var string(x : @Float) = @native(String : [@Character]);
@var string(x : [@Character]) = x;
@var string(x : @Null) = "";

// Math operators
@var @operator++(x : @Integer) = @native(noop : @Integer);
@var @operator++(x : @Float) = @native(noop : @Float);
@var @operator--(x : @Integer) = @native(negate_int : @Integer);
@var @operator--(x : @Float) = @native(negate : @Float);
@var @operator+(lhs : @Integer, rhs : @Integer) : @Integer = @native(plus_int : @Integer);
@var @operator+(lhs : @Float, rhs : @Float) : @Float = @native(plus : @Float);
@var @operator-(lhs : @Integer, rhs : @Integer) : @Integer = @native(minus_int : @Integer);
@var @operator-(lhs : @Float, rhs : @Float) : @Float = @native(minus : @Float);
@var @operator*(lhs : @Integer, rhs : @Integer) : @Integer = @native(times_int : @Integer);
@var @operator*(lhs : @Float, rhs : @Float) : @Float = @native(times : @Float);
@var @operator/(lhs : @Float, rhs : @Float) : @Float = @native(over : @Float);
@var @operator/(lhs : @Integer, rhs : @Integer) : @Integer 
    = @if (rhs == 0, @error("division by 0"), integer (float lhs / float rhs));
@var @operator%(lhs : @Integer, rhs : @Integer) : @Integer = @native(mod : @Integer);
@var @operator%(lhs : @Float, rhs : @Float) : @Float = @native(mod : @Float);
@var isnan(x : @Float) = @native(isnan : @Float);

// bitwise
@var @operator&(lhs : @Integer, rhs : @Integer) : @Integer = @native(and : @Integer);
@var @operator^(lhs : @Integer, rhs : @Integer) : @Integer = @native(xor : @Integer);
@var @operator|(lhs : @Integer, rhs : @Integer) : @Integer = @native(or : @Integer);
@var @operator~(x : @Integer) : @Integer = @native(not : @Integer);
@var @operator<<(lhs : @Integer, rhs : @Integer) : @Integer = @native(shift_left : @Integer);
@var @operator>>(lhs : @Integer, rhs : @Integer) : @Integer = @native(shift_right : @Integer);

@var @operator&(lhs : @Boolean, rhs : @Boolean) : @Boolean = boolean (integer lhs & integer rhs);
@var @operator^(lhs : @Boolean, rhs : @Boolean) : @Boolean = boolean (integer lhs ^ integer rhs);
@var @operator|(lhs : @Boolean, rhs : @Boolean) : @Boolean = boolean (integer lhs | integer rhs);
@var @operator~(x : @Boolean) = @if(x, false, true);

// Array functions
@var<T> length(x : [T]) : @Integer = @native(length : @Integer);
@var<T> join(x : [T], y : [T]) : [T] = @native(join : [T]);
@var<T> subarray(start : @Integer, end : @Integer, x : [T]) {
    @var l = length<T> x;
    @if (
        start < 0
        , @error("Start cannot be negative")
        , @if (
            end > length<T> x
            , @error("End out of bound")
            , @if (
                start > end
                , @error("Start cannot be larger than end")
                , @native(subarray : [T])
            )
        )
    )
}

// Utilities
@var<T> tail(xs : [T]) = subarray<T> 1 (length<T> xs) xs;
@var<From, To> map(f : From To, xs : [From]) : [To] = @if(
    length<From> xs == 0
    , []
    , join<To> [f (xs 0)] (map<From, To> f (tail<From> xs))
);
@var range(from : @Integer, to : @Integer) : [@Integer] = @if(
    from == to
    , [from]
    , @if (
        from > to
        , join<@Integer> [from] (range (from - 1) to)
        , join<@Integer> [from] (range (from + 1) to)
    )
);

// base class for all texts
@class Text {
}

@class InlineText : Text {
}

@class PlainText : InlineText {
    @var content : [@Character];
}

@class StrongText : InlineText {
    @var content : InlineText;
}

@var strong(content : InlineText) = StrongText {content = content};

@class EmphasisedText : InlineText {
    @var content : InlineText;
}
@var emphasis(content : InlineText) = EmphasisedText {content = content};

// A CSS Style
@class Style {
    @var property : [@Character];
    @var value : [@Character];
}

@var style(prop : [@Character], val : [@Character])
    = Style {property = prop; value = val};

@class StyledText : InlineText {
    // CSS Styles applicable to the text
    @var styles : [Style];
    @var content : InlineText;
}

@var apply_style(styles : [Style], content : InlineText)
    = StyledText {styles = styles; content = content};

@class TableCell : Text {
    @var colspan : @Integer = 1;
    @var rowspan : @Integer = 1;
    @var content : Text;
}

@var cell(content : Text) = TableCell {content = content};

@class Table : Text {
    @var cells : [[TableCell]];
}

@var table(cells : [[TableCell]]) = Table {cells = cells};

@class Heading : Text {
    @var level : @Integer;
    @var content : InlineText;
}

@var heading(level : @Integer, content : InlineText)
    = Heading {level = level; content = content};

@class TextSequence : Text {
    @var content : [Text];
}

@var text(x : [@Character]) = PlainText {content = x};
@var text(x : @Integer) = text (string x);
@var text(x : @Float) = text (string x);
@var text(x : @Character) = text (string x);
@var text(x : @Boolean) = text (string x);
@var text(x : @Null) = text "";
@var text(x : Text) = x;
#end#
