<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Test</title>
    <script src="Type.js"/>
    <script src="Node.js"/>
    <script src="fwiki.js"/>
    <script src="natives.js"/>
    <script src="index.js"/>
  </head>
  <body>
    <textarea id="std" cols="80" rows="25" style="display: none;"><![CDATA[// Boolean constants
@var true = @native(true : @Boolean);
@var false = @native(false : @Boolean);

// comparison
@var @operator>(lhs : @Integer, rhs : @Integer) = @native(greater : @Boolean);
@var @operator>(lhs : @Float, rhs : @Float) = @native(greater : @Boolean);
@var @operator>(lhs : @Character, rhs : @Character) = @native(greater : @Boolean);
@var @operator>=(lhs : @Integer, rhs : @Integer) = @native(greater_equal : @Boolean);
@var @operator>=(lhs : @Float, rhs : @Float) = @native(greater_equal : @Boolean);
@var @operator>=(lhs : @Character, rhs : @Character) = @native(greater_equal : @Boolean);
@var @operator<(lhs : @Integer, rhs : @Integer) = @native(less : @Boolean);
@var @operator<(lhs : @Float, rhs : @Float) = @native(less : @Boolean);
@var @operator<(lhs : @Character, rhs : @Character) = @native(less : @Boolean);
@var @operator<=(lhs : @Integer, rhs : @Integer) = @native(less_equal : @Boolean);
@var @operator<=(lhs : @Float, rhs : @Float) = @native(less_equal : @Boolean);
@var @operator<=(lhs : @Character, rhs : @Character) = @native(less_equal : @Boolean);
@var @operator==(lhs : @Integer, rhs : @Integer) = @native(equal : @Boolean);
@var @operator==(lhs : @Float, rhs : @Float) = @native(equal : @Boolean);
@var @operator==(lhs : @Boolean, rhs : @Boolean) = @native(equal : @Boolean);
@var @operator==(lhs : @Character, rhs : @Character) = @native(equal : @Boolean);
@var @operator!=(lhs : @Integer, rhs : @Integer) = @native(not_equal : @Boolean);
@var @operator!=(lhs : @Float, rhs : @Float) = @native(not_equal : @Boolean);
@var @operator!=(lhs : @Boolean, rhs : @Boolean) = @native(not_equal : @Boolean);
@var @operator!=(lhs : @Character, rhs : @Character) = @native(not_equal : @Boolean);

// Type conversions
@var boolean(x : @Boolean) = x;
@var boolean(x : @Integer) = x != 0;
@var boolean(x : @Float) = @native(test_float : @Boolean);
@var boolean(x : @Character) = x != '\0';

@var integer(x : @Boolean) = @if(x, 1, 0);
@var integer(x : @Integer) = x;
@var integer(x : @Float) = @native(trunc : @Integer);
@var integer(x : @Character) = @native(ord : @Integer);
@var integer(x : [@Character]) = @native(parseInt : @Integer);

@var float(x : @Integer) = @native(noop : @Float);
@var float(x : @Float) = x;
@var float(x : [@Character]) = @native(parseFloat : @Float);

@var character(x : @Integer) = @native(chr : @Character);
@var character(x : @Character) = x;

@var string(x : @Boolean) = @if(x, "true", "false");
@var string(x : @Character) = [x];
@var string(x : @Integer) = @native(String : [@Character]);
@var string(x : @Float) = @native(String : [@Character]);
@var string(x : [@Character]) = x;

// Math operators
@var @operator++(x : @Integer) = @native(noop : @Integer);
@var @operator++(x : @Float) = @native(noop : @Float);
@var @operator--(x : @Integer) = @native(negate_int : @Integer);
@var @operator--(x : @Float) = @native(negate : @Float);
@var @operator+(lhs : @Integer, rhs : @Integer) : @Integer = @native(plus_int : @Integer);
@var @operator+(lhs : @Float, rhs : @Float) : @Float = @native(plus : @Float);
@var @operator-(lhs : @Integer, rhs : @Integer) : @Integer = @native(minus_int : @Integer);
@var @operator-(lhs : @Float, rhs : @Float) : @Float = @native(minus : @Float);
@var @operator*(lhs : @Integer, rhs : @Integer) : @Integer = @native(times_int : @Integer);
@var @operator*(lhs : @Float, rhs : @Float) : @Float = @native(times : @Float);
@var @operator/(lhs : @Float, rhs : @Float) : @Float = @native(over : @Float);
@var @operator/(lhs : @Integer, rhs : @Integer) : @Integer = integer (float lhs / float rhs);
@var @operator%(lhs : @Integer, rhs : @Integer) : @Integer = @native(mod : @Integer);
@var @operator%(lhs : @Float, rhs : @Float) : @Float = @native(mod : @Float);
@var isnan(x : @Float) = @native(isnan : @Float);

// bitwise
@var @operator&(lhs : @Integer, rhs : @Integer) : @Integer = @native(and : @Integer);
@var @operator^(lhs : @Integer, rhs : @Integer) : @Integer = @native(xor : @Integer);
@var @operator|(lhs : @Integer, rhs : @Integer) : @Integer = @native(or : @Integer);
@var @operator~(x : @Integer) : @Integer = @native(not : @Integer);
@var @operator<<(lhs : @Integer, rhs : @Integer) : @Integer = @native(shift_left : @Integer);
@var @operator>>(lhs : @Integer, rhs : @Integer) : @Integer = @native(shift_right : @Integer);

@var @operator&(lhs : @Boolean, rhs : @Boolean) : @Boolean = boolean (integer lhs & integer rhs);
@var @operator^(lhs : @Boolean, rhs : @Boolean) : @Boolean = boolean (integer lhs ^ integer rhs);
@var @operator|(lhs : @Boolean, rhs : @Boolean) : @Boolean = boolean (integer lhs | integer rhs);
@var @operator~(x : @Boolean) = @if(x, false, true);

// Array functions
@var<T> length(x : [T]) : @Integer = @native(length : @Integer);
@var<T> join(x : [T], y : [T]) : [T] = @native(join : [T]);
@var<T> subarray(start : @Integer, end : @Integer, x : [T]) {
    @var l = length<T> x;
    @if (
        start < 0
        , @error("Start cannot be negative")
        , @if (
            end > length<T> x
            , @error("End out of bound")
            , @if (
                start > end
                , @error("Start cannot be larger than end")
                , @native(subarray : [T])
            )
        )
    )
}

0]]></textarea>
    <textarea id="code" cols="80" rows="25">This is a test script. The factorial of 6 is #code#
@var factorial(n : @Integer) : @Integer = @if (n > 0, n * factorial(n - 1), 1);
factorial 6
#end#.
    </textarea>
    <br/>
    <textarea readonly="readonly" id="output" cols = "80" rows="25"/>
    <button onclick="run();">Run!</button>
  </body>
</html>
